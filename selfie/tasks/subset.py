#!/usr/bin/env python3

##########################################################################################
# Developers: 	Icaro Alzuru and Aditi Malladi
# Project: 		HuMaIN (http://humain.acis.ufl.edu)
# Description: 	Randomly selects n specimens from the unprocessed specimens
##########################################################################################
# Copyright 2019    Advanced Computing and Information Systems (ACIS) Lab - UF
#                   (https://www.acis.ufl.edu/)
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file 
# except in compliance with the License. You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the 
# License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
# either express or implied. See the License for the specific language governing permissions 
# and limitations under the License.
##########################################################################################

import os, sys, argparse, glob, random
import pandas as pd

from humain.constants import *
from humain.utils import *

##############################################################################################################################################################
if __name__ == '__main__':
	""" Randomly selects n specimens from the unprocessed specimens"""
	# Read arguments
	parser = argparse.ArgumentParser("Randomly selects n specimens from the unprocessed specimens")
	parser.add_argument('-i','--init_list_file',action="store", required=True, help="File containing the list of specimens in the entire set.")
	parser.add_argument('-n','--subset_size',action="store", required=True, help="Number of specimens to select in every subset.")
	parser.add_argument('-mt','--m_ar_task',action="append", required=False, help="Accept/Reject directory generated by a machine task. Rejected specimens will be reprocessed.")
	parser.add_argument('-o', '--output_file', action="store", required=True, help="Text file where the list of selected specimens will be saved.")
	args = parser.parse_args()

	# Usage example:
	# python3 ~/Fall2019/HuMaIN_Simulator/selfie/tasks/subset.py -i ~/Fall2019/HuMaIN_Simulator/datasets/aocr_mix100/specimen_list.txt -n 20 -mt rb_dict_extr -o ~/Fall2019/HuMaIN_Simulator/selfie/results/recorded_by_hitl/iteration_2/selected_specimens.txt

	################################################################################################################################
	# ARGUMENTS VALIDATIONS
	################################################################################################################################
	#### INPUTS
	# args.init_list_file
	verify_file( args.init_list_file, 'The file with the original list of specimens (' + args.init_list_file + ') was not found: ', parser, 1 )
	# args.subset_size
	subset_size = 0
	try:
		subset_size = int(args.subset_size)
		if (subset_size < 1):
			raise ValueError('Invalid subset size.')
	except:
		print('Error: The specified subset size is invalid.\n')
		parser.print_help()
		sys.exit(2)
	# args.output_file
	results_dir = os.path.dirname( args.output_file )
	verify_create_dir( results_dir, 'The directory of the output file (' + args.output_file + ') does not exist.', parser, 3 )	

	##########################################################################################		
	# GET THE NUMBER OF THE LAST ITERATION
	current_iteration_number = 1
	try:
		currect_iteration_dir = os.path.dirname( args.output_file )
		current_iteration_number = int( currect_iteration_dir.split('_')[-1] )
	except:
		print('Error: The iteration directory does not have a number.\n')
		sys.exit(4)
	previous_iteration_number = current_iteration_number - 1
	previous_results_dir = results_dir.replace("_" + str(current_iteration_number), "_" + str(previous_iteration_number) )

	##########################################################################################		
	# GET THE LIST OF AVAILABLE SPECIMENS TO BE PROCESSED (FROM LAST ITERATION)
	available_specimens = set()
	if current_iteration_number == 1:
		# all the specimens of the dataset
		lines = []
		with open(args.init_list_file) as f_orig:
			lines = f_orig.readlines()
		available_specimens = set( [line.strip() for line in lines] )
	else:
		# Machine self-aware tasks
		for m_task in args.m_ar_task:
			rejected_file = previous_results_dir + "/" + m_task + "/rejected/rejected.txt"
			verify_file( rejected_file, 'Rejected file was not found for task ' + m_task + ' in the iteration directory ' + previous_results_dir +  '.', None, 5 )
			# Open the file and add to the set the 
			df_r = pd.read_csv( rejected_file, sep='\t', names = ['specimen', 'value'] )
			df_r.fillna('', inplace= True)
			available_specimens = available_specimens | set(df_r['specimen'])

	##########################################################################################		
	# GENERATE THE LIST OF SELECTED SPECIMENS
	selected_specimens = set()
	if len(available_specimens) == 0:
		sys.exit(-1)
	elif len(available_specimens) <= subset_size:
		selected_specimens = available_specimens
	else:
		selected_specimens = random.sample( available_specimens, subset_size )

	##########################################################################################		
	# SAVE THE SUBSET OF SELECTED SPECIMENS
	output_text = ""
	for specimen in selected_specimens:
		output_text += specimen + "\n"
	with open(args.output_file, "w+") as f_o:
		f_o.write( output_text )

	##########################################################################################		
	# GENERATE THE LIST OF SPECIMENS THAT STILL NEED TO BE PROCESSED (NOT INCLUDING THE SELECTED)
	available_specimens = available_specimens - set(selected_specimens)

	##########################################################################################		
	# SAVE THE SUBSET OF SELECTED SPECIMENS
	output_text = ""
	for specimen in available_specimens:
		output_text += specimen + "\n"
	with open( os.path.dirname(args.output_file) + "/remaining_specimens.txt", "w+" ) as f_r:
		f_r.write( output_text )

	sys.exit(0)